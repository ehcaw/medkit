import { VulnerabilityScanner } from '../services/VulnerabilityScanner.js';
import { ScanOptions } from '../models/index.js';

describe('VulnerabilityScanner', () => {
  let scanner: VulnerabilityScanner;

  beforeEach(() => {
    scanner = new VulnerabilityScanner();
  });

  describe('scanCodeString', () => {
    it('should detect XSS vulnerability', async () => {
      const vulnerableCode = `
        function displayUserInput(userInput) {
          document.getElementById('output').innerHTML = userInput;
        }
      `;

      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.findings.length).toBeGreaterThan(0);
      
      const xssFinding = result.findings.find(f => f.title.includes('XSS'));
      expect(xssFinding).toBeDefined();
      expect(xssFinding?.type).toBe('security');
      expect(xssFinding?.severity).toBe('high');
    });

    it('should detect SQL injection vulnerability', async () => {
      const vulnerableCode = `
        function getUserData(userId) {
          const query = \`SELECT * FROM users WHERE id = \${userId}\`;
          return db.query(query);
        }
      `;

      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.findings.length).toBeGreaterThan(0);
      
      const sqlFinding = result.findings.find(f => f.title.includes('SQL Injection'));
      expect(sqlFinding).toBeDefined();
      expect(sqlFinding?.type).toBe('security');
      expect(sqlFinding?.severity).toBe('critical');
    });

    it('should detect hardcoded secrets', async () => {
      const vulnerableCode = `
        const config = {
          api_key: "sk-1234567890abcdef1234567890abcdef1234567890abcdef",
          password: "super_secret_password_123"
        };
      `;

      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.findings.length).toBeGreaterThan(0);
      
      const secretFinding = result.findings.find(f => f.title.includes('Hardcoded Secrets'));
      expect(secretFinding).toBeDefined();
      expect(secretFinding?.type).toBe('security');
      expect(secretFinding?.severity).toBe('high');
    });

    it('should detect React performance issues', async () => {
      const vulnerableCode = `
        function MyComponent({ data }) {
          return (
            <div>
              <button onClick={() => console.log('clicked')}>
                Click me
              </button>
              <div style={{ color: 'red', fontSize: '14px' }}>
                Inline styles
              </div>
            </div>
          );
        }
      `;

      const options: ScanOptions = {
        includeSecurity: false,
        includePerformance: true,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.findings.length).toBeGreaterThan(0);
      
      const performanceFindings = result.findings.filter(f => f.type === 'performance');
      expect(performanceFindings.length).toBeGreaterThan(0);
    });

    it('should generate prompts when requested', async () => {
      const vulnerableCode = `
        function displayUserInput(userInput) {
          document.getElementById('output').innerHTML = userInput;
        }
      `;

      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: true,
        generateDocumentation: false,
        llmModel: 'gpt-4'
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.prompts).toBeDefined();
      expect(result.prompts!.length).toBeGreaterThan(0);
      
      const prompt = result.prompts![0];
      expect(prompt.model).toBe('gpt-4');
      expect(prompt.prompt).toContain('XSS');
      expect(prompt.prompt).toContain('security');
    });

    it('should generate documentation suggestions when requested', async () => {
      const code = `
        function MyComponent(props) {
          return <div>Hello World</div>;
        }
      `;

      const options: ScanOptions = {
        includeSecurity: false,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: true
      };

      const result = await scanner.scanCodeString(code, 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.documentation).toBeDefined();
      expect(result.documentation!.length).toBeGreaterThan(0);
      
      const docSuggestion = result.documentation![0];
      expect(docSuggestion.type).toBe('component');
      expect(docSuggestion.target).toBe('MyComponent');
    });

    it('should handle empty code gracefully', async () => {
      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: true,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString('', 'javascript', options);

      expect(result.status).toBe('completed');
      expect(result.findings.length).toBe(0);
      expect(result.summary.totalFindings).toBe(0);
    });

    it('should respect security analysis toggle', async () => {
      const vulnerableCode = `
        function displayUserInput(userInput) {
          document.getElementById('output').innerHTML = userInput;
        }
      `;

      const options: ScanOptions = {
        includeSecurity: false,
        includePerformance: true,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(vulnerableCode, 'javascript', options);

      expect(result.status).toBe('completed');
      const securityFindings = result.findings.filter(f => f.type === 'security');
      expect(securityFindings.length).toBe(0);
    });

    it('should respect performance analysis toggle', async () => {
      const code = `
        function MyComponent({ data }) {
          return (
            <div>
              <button onClick={() => console.log('clicked')}>
                Click me
              </button>
            </div>
          );
        }
      `;

      const options: ScanOptions = {
        includeSecurity: true,
        includePerformance: false,
        includeReactScan: false,
        generatePrompts: false,
        generateDocumentation: false
      };

      const result = await scanner.scanCodeString(code, 'javascript', options);

      expect(result.status).toBe('completed');
      const performanceFindings = result.findings.filter(f => f.type === 'performance');
      expect(performanceFindings.length).toBe(0);
    });
  });

  describe('rule management', () => {
    it('should enable and disable rules', () => {
      const enabledRules = scanner.getEnabledRules();
      expect(enabledRules.length).toBeGreaterThan(0);

      // Disable a rule
      scanner.disableRule('SEC001');
      const afterDisable = scanner.getEnabledRules();
      expect(afterDisable).not.toContain('SEC001');

      // Enable the rule again
      scanner.enableRule('SEC001');
      const afterEnable = scanner.getEnabledRules();
      expect(afterEnable).toContain('SEC001');
    });
  });

  describe('language support', () => {
    it('should list supported languages', () => {
      const languages = scanner.getSupportedLanguages();
      expect(languages).toContain('javascript');
      expect(languages).toContain('typescript');
      expect(languages).toContain('html');
      expect(languages).toContain('css');
    });

    it('should check language support', () => {
      expect(scanner.isLanguageSupported('javascript')).toBe(true);
      expect(scanner.isLanguageSupported('typescript')).toBe(true);
      expect(scanner.isLanguageSupported('unsupported')).toBe(false);
    });
  });
}); 