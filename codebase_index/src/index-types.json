{
    "py" :[
        "module",
        "block",
        "_compound_statement",
        "class_definition",
        "decorated_definition",
        "for_statement",
        "function_definition",
        "if_statement",
        "match_statement",
        "try_statement",
        "while_statement",
        "with_statement",
        "_simple_statement",
        "expression",
        "pattern",
        "primary_expression",
        "import_from_statement",
        "future_import_statement",
        "import_statement",
        "expression_statement"
    ],
    "rs": [
        "_declaration_statement",
        "associated_type",
        "attribute_item",
        "const_item",
        "enum_item",
        "enum_variant_list",
        "extern_crate_declaration",
        "foreign_mod_item",
        "function_item",
        "impl_item",
        "let_declaration",
        "macro_definition",
        "macro_invocation",
        "mod_item",
        "static_item",
        "struct_item",
        "trait_item",
        "union_item",
        "use_declaration",
        "_expression",
        "async_block",
        "block",
        "const_block",
        "for_expression",
        "gen_block",
        "generic_function",
        "if_expression",
        "loop_expression",
        "match_expression",
        "struct_expression",
        "try_block",
        "unsafe_block",
        "while_expression"
    ],
    "zig": [
        "expression",
        "async_expression",
        "await_expression",
        "block",
        "break_expression",
        "catch_expression",
        "comptime_expression",
        "continue_expression",
        "for_expression",
        "if_expression",
        "return_expression",
        "try_expression",
        "type_expression",
        "while_expression",
        "primary_type_expression",
        "enum_declaration",
        "function_signature",
        "opaque_declaration",
        "struct_declaration",
        "switch_expression",
        "union_declaration",
        "statement",
        "comptime_statement",
        "defer_statement",
        "errdefer_statement",
        "expression_statement",
        "for_statement",
        "if_statement",
        "labeled_statement",
        "nosuspend_statement",
        "variable_declaration",
        "while_statement",
        "anonymous_struct_initializer",
        "error_set_declaration",
        "labeled_type_expression",
        "struct_initializer"
    ],
    "cpp": [
        "declaration",
        "field_declaration",
        "field_declaration_list",
        "type_definition",
        "expression",
        "assignment_expression",
        "binary_expression",
        "call_expression",
        "cast_expression",
        "compound_literal_expression",
        "conditional_expression",
        "delete_expression",
        "lambda_expression",
        "new_expression",
        "requires_clause",
        "requires_expression",
        "unary_expression",
        "statement",
        "case_statement",
        "compound_statement",
        "function_definition",
        "do_statement",
        "for_range_loop",
        "for_statement",
        "if_statement",
        "labeled_statement",
        "switch_statement",
        "throw_statement",
        "try_statement",
        "while_statement",
        "type_specifier",
        "class_specifier",
        "decltype",
        "dependent_type",
        "enum_specifier",
        "placeholder_type_specifier",
        "sized_type_specifier",
        "struct_specifier",
        "template_type",
        "union_specifier",
        "using_declaration",
        "linkage_specification",
        "preproc_include",
        "preproc_if",
        "preproc_ifdef",
        "preproc_def",
        "preproc_function_def",
        "preproc_call",
        "namespace_definition",
        "namespace_alias_definition",
        "static_assert_declaration",
        "template_declaration",
        "template_instantiation"
    ],
    "c": [
        "declaration",
        "field_declaration",
        "field_declaration_list",
        "type_definition",

        "expression",
        "assignment_expression",
        "binary_expression",
        "call_expression",
        "cast_expression",
        "conditional_expression",
        "sizeof_expression",
        "unary_expression",
        "update_expression",

        "statement",
        "compound_statement",
        "if_statement",
        "switch_statement",
        "case_statement",
        "while_statement",
        "do_statement",
        "for_statement",
        "break_statement",
        "continue_statement",
        "return_statement",
        "goto_statement",
        "expression_statement",
        "labeled_statement",

        "function_definition",
        "parameter_list",
        "initializer_list",

        "struct_specifier",
        "union_specifier",
        "enum_specifier",

        "preproc_include",
        "preproc_if",
        "preproc_ifdef",
        "preproc_call"
    ],
    "ts": [
        "declaration",
        "lexical_declaration",
        "variable_statement",
        "class_declaration",
        "function_declaration",
        "generator_function_declaration",
        "interface_declaration",
        "type_alias_declaration",
        "enum_declaration",
        "module",
        "internal_module",
        "import_statement",
        "export_statement",
        "statement",
        "if_statement",
        "switch_statement",
        "while_statement",
        "do_statement",
        "for_statement",
        "for_in_statement",
        "for_of_statement",
        "break_statement",
        "continue_statement",
        "return_statement",
        "throw_statement",
        "try_statement",
        "expression_statement",
        "labeled_statement",
        "expression",
        "assignment_expression",
        "binary_expression",
        "call_expression",
        "new_expression",
        "member_expression",
        "subscript_expression",
        "unary_expression",
        "update_expression",
        "ternary_expression",
        "await_expression",
        "yield_expression",
        "arrow_function",
        "primary_expression"
    ],
    "tsx": [
        "declaration",
        "lexical_declaration",
        "variable_statement",
        "class_declaration",
        "function_declaration",
        "generator_function_declaration",
        "interface_declaration",
        "type_alias_declaration",
        "enum_declaration",
        "module",
        "internal_module",
        "import_statement",
        "export_statement",
        "statement",
        "if_statement",
        "switch_statement",
        "while_statement",
        "do_statement",
        "for_statement",
        "for_in_statement",
        "for_of_statement",
        "break_statement",
        "continue_statement",
        "return_statement",
        "throw_statement",
        "try_statement",
        "expression_statement",
        "labeled_statement",
        "expression",
        "assignment_expression",
        "binary_expression",
        "call_expression",
        "new_expression",
        "member_expression",
        "subscript_expression",
        "unary_expression",
        "update_expression",
        "ternary_expression",
        "await_expression",
        "yield_expression",
        "arrow_function",
        "primary_expression",
        "jsx_element",
        "jsx_self_closing_element",
        "jsx_fragment",
        "jsx_expression"
    ],
    "js": [
        "lexical_declaration",
        "variable_declaration",
        "class_declaration",
        "function_declaration",
        "generator_function_declaration",
        "import_statement",
        "export_statement",
        "statement",
        "if_statement",
        "switch_statement",
        "while_statement",
        "do_statement",
        "for_statement",
        "for_in_statement",
        "for_of_statement",
        "break_statement",
        "continue_statement",
        "return_statement",
        "throw_statement",
        "try_statement",
        "expression_statement",
        "labeled_statement",
        "expression",
        "assignment_expression",
        "binary_expression",
        "call_expression",
        "new_expression",
        "member_expression",
        "subscript_expression",
        "unary_expression",
        "update_expression",
        "ternary_expression",
        "await_expression",
        "yield_expression",
        "arrow_function",
        "primary_expression"
    ]
}